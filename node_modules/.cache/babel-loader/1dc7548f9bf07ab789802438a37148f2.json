{"ast":null,"code":"var _jsxFileName = \"/Users/tylerhooks/tyler-portfolio/src/components/themeContext.js\",\n    _s2 = $RefreshSig$();\n\n/* eslint-disable react-hooks/rules-of-hooks */\nimport React from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst getInitialTheme = () => {\n  if (typeof window !== 'undefined' && window.localStorage) {\n    const storedPrefs = window.localStorage.getItem('current-theme');\n\n    if (typeof storePrefs === 'string') {\n      return storedPrefs;\n    }\n\n    if (window.matchMedia('prefers-color-scheme: dark').matches) {\n      return \"dark\";\n    }\n  }\n\n  return \"light\";\n};\n\nexport const ThemeProvider = ({\n  initalTheme,\n  children\n}) => {\n  _s2();\n\n  var _s = $RefreshSig$();\n\n  const [theme, setTheme] = React.useState(getInitialTheme);\n\n  const checkTheme = existing => {\n    _s();\n\n    const root = window.document.documentElement;\n    const isDark = existing === 'dark';\n    root.classList.remove(isDark ? 'light' : 'dark');\n    root.classList.add(existing);\n    localStorage.setItem('current-theme', existing);\n\n    if (initalTheme) {\n      checkTheme(initalTheme);\n    }\n\n    React.useEffect(() => {\n      checkTheme(initalTheme);\n    }, [theme]);\n    return /*#__PURE__*/_jsxDEV(ThemeContext.Provider, {\n      value: {\n        theme,\n        setTheme\n      },\n      children: children\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 13\n    }, this);\n  };\n\n  _s(checkTheme, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n};\n\n_s2(ThemeProvider, \"2+juXsMeKdVg9fw7LEKo01zJM/0=\");\n\n_c = ThemeProvider;\nexport const ThemeContext = /*#__PURE__*/React.createContext();\n\nvar _c;\n\n$RefreshReg$(_c, \"ThemeProvider\");","map":{"version":3,"sources":["/Users/tylerhooks/tyler-portfolio/src/components/themeContext.js"],"names":["React","getInitialTheme","window","localStorage","storedPrefs","getItem","storePrefs","matchMedia","matches","ThemeProvider","initalTheme","children","theme","setTheme","useState","checkTheme","existing","root","document","documentElement","isDark","classList","remove","add","setItem","useEffect","ThemeContext","createContext"],"mappings":";;;AAAA;AACA,OAAOA,KAAP,MAAkB,OAAlB;;;AAEA,MAAMC,eAAe,GAAG,MAAM;AAC1B,MAAI,OAAOC,MAAP,KAAkB,WAAlB,IAAiCA,MAAM,CAACC,YAA5C,EAA0D;AACtD,UAAMC,WAAW,GAAGF,MAAM,CAACC,YAAP,CAAoBE,OAApB,CAA4B,eAA5B,CAApB;;AACA,QAAI,OAAOC,UAAP,KAAsB,QAA1B,EAAoC;AAChC,aAAOF,WAAP;AACH;;AAED,QAAIF,MAAM,CAACK,UAAP,CAAkB,4BAAlB,EAAgDC,OAApD,EAA6D;AACzD,aAAO,MAAP;AACH;AACJ;;AAED,SAAO,OAAP;AACH,CAbD;;AAeA,OAAO,MAAMC,aAAa,GAAG,CAAC;AAAEC,EAAAA,WAAF;AAAeC,EAAAA;AAAf,CAAD,KAA+B;AAAA;;AAAA;;AACxD,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBb,KAAK,CAACc,QAAN,CAAeb,eAAf,CAA1B;;AACA,QAAMc,UAAU,GAAIC,QAAD,IAAc;AAAA;;AAC7B,UAAMC,IAAI,GAAGf,MAAM,CAACgB,QAAP,CAAgBC,eAA7B;AACA,UAAMC,MAAM,GAAGJ,QAAQ,KAAK,MAA5B;AAGAC,IAAAA,IAAI,CAACI,SAAL,CAAeC,MAAf,CAAsBF,MAAM,GAAG,OAAH,GAAa,MAAzC;AACAH,IAAAA,IAAI,CAACI,SAAL,CAAeE,GAAf,CAAmBP,QAAnB;AAEAb,IAAAA,YAAY,CAACqB,OAAb,CAAqB,eAArB,EAAsCR,QAAtC;;AAEA,QAAIN,WAAJ,EAAiB;AACbK,MAAAA,UAAU,CAACL,WAAD,CAAV;AACH;;AAEDV,IAAAA,KAAK,CAACyB,SAAN,CAAgB,MAAM;AAClBV,MAAAA,UAAU,CAACL,WAAD,CAAV;AACH,KAFD,EAEG,CAACE,KAAD,CAFH;AAGA,wBACI,QAAC,YAAD,CAAc,QAAd;AAAuB,MAAA,KAAK,EAAE;AAAEA,QAAAA,KAAF;AAASC,QAAAA;AAAT,OAA9B;AAAA,gBACKF;AADL;AAAA;AAAA;AAAA;AAAA,YADJ;AAKH,GAtBD;;AAFwD,KAElDI,UAFkD;AAyB3D,CAzBM;;IAAMN,a;;KAAAA,a;AA2Bb,OAAO,MAAMiB,YAAY,gBAAG1B,KAAK,CAAC2B,aAAN,EAArB","sourcesContent":["/* eslint-disable react-hooks/rules-of-hooks */\nimport React from \"react\";\n\nconst getInitialTheme = () => {\n    if (typeof window !== 'undefined' && window.localStorage) {\n        const storedPrefs = window.localStorage.getItem('current-theme');\n        if (typeof storePrefs === 'string') {\n            return storedPrefs;\n        }\n\n        if (window.matchMedia('prefers-color-scheme: dark').matches) {\n            return \"dark\";\n        }\n    }\n\n    return \"light\";\n}\n\nexport const ThemeProvider = ({ initalTheme, children }) => {\n    const [theme, setTheme] = React.useState(getInitialTheme);\n    const checkTheme = (existing) => {\n        const root = window.document.documentElement;\n        const isDark = existing === 'dark';\n\n\n        root.classList.remove(isDark ? 'light' : 'dark');\n        root.classList.add(existing);\n\n        localStorage.setItem('current-theme', existing)\n\n        if (initalTheme) {\n            checkTheme(initalTheme)\n        }\n\n        React.useEffect(() => {\n            checkTheme(initalTheme);\n        }, [theme]);\n        return (\n            <ThemeContext.Provider value={{ theme, setTheme }}>\n                {children}\n            </ThemeContext.Provider>\n        );\n    };\n};\n\nexport const ThemeContext = React.createContext();"]},"metadata":{},"sourceType":"module"}